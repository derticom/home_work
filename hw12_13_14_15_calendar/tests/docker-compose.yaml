services:
  postgres:
    image: postgres:latest
    container_name: postgres
    restart: always
    environment:
      POSTGRES_DB: calendar
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "postgres", "-d", "calendar"]
      interval: 10s
      retries: 5
    networks:
      - backend

  rabbitmq:
    image: rabbitmq:3-management
    container_name: rabbitmq
    restart: always
    environment:
      RABBITMQ_DEFAULT_USER: user
      RABBITMQ_DEFAULT_PASS: pass
    ports:
      - "5672:5672"   # AMQP
      - "15672:15672" # Web UI
    networks:
      - backend

  calendar:
    build:
      context: ../
      dockerfile: deployments/calendar.dockerfile
    container_name: calendar
    depends_on:
      postgres:
        condition: service_healthy
      rabbitmq:
        condition: service_started
    ports:
      - "8090:8090" # gRPC
      - "8085:8085" # REST
    networks:
      - backend

  sender:
    build:
      context: ../
      dockerfile: deployments/sender.dockerfile
      args:
        SERVICE_NAME: sender
    container_name: sender
    depends_on:
      postgres:
        condition: service_healthy
      rabbitmq:
        condition: service_started
    networks:
      - backend

  scheduler:
    build:
      context: ../
      dockerfile: deployments/scheduler.dockerfile
      args:
        SERVICE_NAME: scheduler
    container_name: scheduler
    depends_on:
      postgres:
        condition: service_healthy
      rabbitmq:
        condition: service_started
    networks:
      - backend

  integration-tests:
    build:
      context: ../
      dockerfile: tests/integration-tests.dockerfile
    container_name: integration-tests
    depends_on:
      calendar:
        condition: service_started
      scheduler:
        condition: service_started
      sender:
        condition: service_started
    networks:
      - backend
networks:
  backend:
